<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.fitzcode.admin.mapper.AdminRefundMapper">

    <resultMap id="RefundResultMap" type="kr.co.fitzcode.common.dto.RefundDTO">
        <id property="refundId" column="refund_id"/>
        <result property="orderId" column="order_id"/>
        <result property="orderDetailId" column="order_detail_id"/>
        <result property="paymentId" column="payment_id"/>
        <result property="refundReason" column="refund_reason"/>
        <result property="refundStatusCode" column="refund_status" javaType="java.lang.Integer"/>
        <result property="refundAmount" column="refund_amount"/>
        <result property="remainingRefundAmount" column="remaining_refund_amount"/>
        <result property="refundMethod" column="refund_method"/>
        <result property="requestedAt" column="requested_at"/>
        <result property="processedAt" column="processed_at"/>
        <result property="completedAt" column="completed_at"/>
        <result property="userName" column="user_name"/>
        <result property="transactionId" column="transaction_id"/>
        <result property="paymentAmount" column="payment_amount"/>
        <result property="userId" column="user_id"/>
        <result property="accountHolder" column="account_holder"/>
        <result property="bankName" column="bank_name"/>
        <result property="accountNumber" column="account_number"/>
    </resultMap>

    <resultMap id="OrderDetailResultMap" type="kr.co.fitzcode.common.dto.RefundDTO$OrderDetailDTO">
        <result property="orderId" column="order_id"/>
        <result property="orderDate" column="order_date"/>
        <result property="userName" column="user_name"/>
        <result property="quantity" column="quantity"/>
        <result property="totalAmount" column="total_amount"/>
        <result property="orderStatus" column="order_status" javaType="kr.co.fitzcode.common.enums.OrderStatus"
                typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"/>
        <result property="orderDetailId" column="order_detail_id"/>
        <result property="productId" column="product_id"/>
        <result property="productName" column="product_name"/>
        <result property="price" column="price"/>
        <result property="refundStatusCode" column="refund_status" javaType="java.lang.Integer"/>
        <result property="refundAmount" column="refund_amount"/>
    </resultMap>

    <!-- 환불 목록 조회 -->
    <select id="getRefundList" resultMap="RefundResultMap">
        SELECT r.refund_id, r.order_id, r.order_detail_id, r.payment_id, r.refund_reason, r.refund_status,
        r.refund_amount, r.remaining_refund_amount, r.refund_method, r.requested_at, r.processed_at, r.completed_at,
        u.user_name, u.user_id, p.transaction_id, p.amount as payment_amount
        FROM REFUND r
        LEFT JOIN ORDERS o ON r.order_id = o.order_id
        LEFT JOIN USER u ON o.user_id = u.user_id
        LEFT JOIN PAYMENT p ON r.payment_id = p.payment_id
        <where>
            <if test="status != null">
                AND r.refund_status = #{status}
            </if>
            <if test="orderId != null and orderId != ''">
                AND o.order_id = #{orderId}
            </if>
        </where>
        ORDER BY r.requested_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 환불 상세 조회 -->
    <select id="getRefundDetail" parameterType="long" resultMap="RefundResultMap">
        SELECT r.refund_id, r.order_id, r.order_detail_id, r.payment_id, r.refund_reason, r.refund_status,
        r.refund_amount, r.remaining_refund_amount, r.refund_method, r.requested_at, r.processed_at, r.completed_at,
        u.user_name, u.user_id, p.transaction_id, p.amount as payment_amount,
        ua.account_holder, ua.bank_name, ua.account_number
        FROM REFUND r
        LEFT JOIN ORDERS o ON r.order_id = o.order_id
        LEFT JOIN USER u ON o.user_id = u.user_id
        LEFT JOIN PAYMENT p ON r.payment_id = p.payment_id
        LEFT JOIN USER_ACCOUNT ua ON u.user_id = ua.user_id AND ua.is_default = TRUE
        WHERE r.refund_id = #{refundId}
    </select>

    <!-- 환불 신청된 상품 목록 조회 -->
    <select id="getRequestedRefundItems" resultMap="OrderDetailResultMap">
        SELECT od.order_id, o.created_at as order_date, u.user_name, od.quantity, od.price * od.quantity as total_amount,
        o.order_status, od.order_detail_id, od.product_id, p.product_name, od.price, od.refund_status,
        od.price * od.quantity as refund_amount
        FROM ORDER_DETAIL od
        JOIN ORDERS o ON od.order_id = o.order_id
        JOIN USER u ON o.user_id = u.user_id
        JOIN PRODUCT p ON od.product_id = p.product_id
        WHERE od.order_id = #{orderId}
        AND od.refund_status = (SELECT refund_status FROM REFUND WHERE order_id = od.order_id LIMIT 1)
    </select>

    <!-- 환불 상태 업데이트 -->
    <update id="updateRefundStatus" parameterType="map">
        UPDATE REFUND
        SET refund_status = #{status},
        processed_at = CASE WHEN #{status} = 2 THEN CURRENT_TIMESTAMP ELSE processed_at END,
        completed_at = CASE WHEN #{status} = 3 THEN CURRENT_TIMESTAMP ELSE completed_at END
        WHERE refund_id = #{refundId}
    </update>

    <!-- 남은 환불 가능 금액 업데이트 -->
    <update id="updateRemainingRefundAmount" parameterType="map">
        UPDATE REFUND
        SET remaining_refund_amount = #{remainingAmount}
        WHERE refund_id = #{refundId}
    </update>

    <!-- 환불 금액 업데이트 -->
    <update id="updateRefundAmount" parameterType="map">
        UPDATE REFUND
        SET refund_amount = #{refundAmount}
        WHERE refund_id = #{refundId}
    </update>

    <!-- ORDER_DETAIL 환불 상태 업데이트 -->
    <update id="updateOrderDetailRefundStatus" parameterType="map">
        UPDATE ORDER_DETAIL
        SET refund_status = #{status}
        WHERE order_detail_id = #{orderDetailId}
    </update>

    <!-- ORDER_DETAIL 환불 상태 업데이트 (order_id 기준) -->
    <update id="updateOrderDetailRefundStatusByOrderId" parameterType="map">
        UPDATE ORDER_DETAIL
        SET refund_status = #{status}
        WHERE order_id = #{orderId}
    </update>

    <!-- 환불 기록 삽입 -->
    <insert id="insertRefund" parameterType="kr.co.fitzcode.common.dto.RefundDTO" useGeneratedKeys="true" keyProperty="refundId">
        INSERT INTO REFUND (order_id, payment_id, refund_reason, refund_status, refund_amount, remaining_refund_amount, refund_method, requested_at)
        VALUES (#{orderId}, (SELECT payment_id FROM PAYMENT WHERE order_id = #{orderId} LIMIT 1), #{refundReason}, #{refundStatusCode}, #{refundAmount}, #{remainingRefundAmount}, #{refundMethod}, #{requestedAt})
    </insert>

    <!-- 결제 금액 조회 -->
    <select id="getPaymentAmountByOrderId" parameterType="long" resultType="int">
        SELECT amount FROM PAYMENT WHERE order_id = #{orderId} LIMIT 1
    </select>

    <!-- 환불 상세 조회 (order_id 기준) -->
    <select id="getRefundDetailByOrderId" parameterType="long" resultMap="RefundResultMap">
        SELECT r.refund_id, r.order_id, r.order_detail_id, r.payment_id, r.refund_reason, r.refund_status,
        r.refund_amount, r.remaining_refund_amount, r.refund_method, r.requested_at, r.processed_at, r.completed_at,
        u.user_name, u.user_id, p.transaction_id, p.amount as payment_amount,
        ua.account_holder, ua.bank_name, ua.account_number
        FROM REFUND r
        LEFT JOIN ORDERS o ON r.order_id = o.order_id
        LEFT JOIN USER u ON o.user_id = u.user_id
        LEFT JOIN PAYMENT p ON r.payment_id = p.payment_id
        LEFT JOIN USER_ACCOUNT ua ON u.user_id = ua.user_id AND ua.is_default = TRUE
        WHERE r.order_id = #{orderId}
        LIMIT 1
    </select>

    <!-- SALES_TRANSACTION_LOG에 환불 기록 인서트 -->
    <insert id="insertSalesTransactionLog" parameterType="map">
        INSERT INTO SALES_TRANSACTION_LOG (order_id, order_detail_id, user_id, transaction_date, quantity, amount, transaction_type)
        SELECT #{orderId}, #{orderDetailId}, o.user_id, CURRENT_TIMESTAMP, od.quantity, #{amount}, #{transactionType}
        FROM ORDER_DETAIL od
        JOIN ORDERS o ON od.order_id = o.order_id
        WHERE od.order_detail_id = #{orderDetailId}
    </insert>

    <!-- 알림 -->
    <insert id="insertNotification" parameterType="map">
        INSERT INTO NOTIFICATION (user_id, type, message, related_id)
        VALUES (#{userId}, #{type}, #{message}, #{relatedId})
    </insert>

    <!-- 총 환불 건수 조회 -->
    <select id="getRefundCount" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM REFUND r
        LEFT JOIN ORDERS o ON r.order_id = o.order_id
        <where>
            <if test="status != null">
                AND r.refund_status = #{status}
            </if>
            <if test="orderId != null and orderId != ''">
                AND o.order_id = #{orderId}
            </if>
        </where>
    </select>
</mapper>